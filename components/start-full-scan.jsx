/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/wSPjcvfNOcM
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { toast } from "sonner"
export function StartFullScan() {
  const [isLoading, setIsLoading] = useState(false)
  const [scanData, setScanData] = useState(null)
  const [open,setOpen] = useState(false);
  const handleStartScan = async () => {

    setIsLoading(true)
    setOpen(false)
   toast("Full Scan Initiated", {
      description: "We'll notify you on completion.",
      action: {
        label: "Undo",
        onClick: () => console.log("Undo"),
      },
    })
    try {

      function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    
    const csrfToken = getCookie('csrftoken');
    
      const response = await fetch("http://127.0.0.1:8000/scan/", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": csrfToken, 
        },
      })

      if(!response.ok){
        throw new Error("Could not perform a full scan")
      }
      const data = await response.json()
      setScanData(data)

    toast("Full Scan completed successfully!", {
      description: "Visit the reports page.",
    })

    } catch (error) {
      toast("Full Scan Failed.", {
        description: "Visit the reports page for more details",
      })

      console.error("Error starting scan:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleStaticScan = async () => {

    setIsLoading(true)
    setOpen(false)
   toast("SAST Initiated", {
      description: "We'll notify you on completion.",
      action: {
        label: "Undo",
        onClick: () => console.log("Undo"),
      },
    })
    try {

      function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    
    const csrfToken = getCookie('csrftoken');
    
      const response = await fetch("http://127.0.0.1:8000/bearerScan/", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": csrfToken, 
        },
      })

      if(!response.ok){
        throw new Error("Could not perform a full scan")
      }
      const data = await response.json()
      setScanData(data)

    toast("SAST completed successfully!", {
      description: "Visit the reports page.",
    })

    } catch (error) {
      toast("SAST Failed.", {
        description: "Visit the reports page for more details",
      })

      console.error("Error starting scan:", error)
    } finally {
      setIsLoading(false)
    }
  }
  return (
    (<Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" onClick={()=>setOpen(true)}>Start Scan</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Scan Your System</DialogTitle>
          <DialogDescription>Click the button below to start a security scan of your system.</DialogDescription>
        </DialogHeader>
          <div className="flex justify-center gap-3  py-4">
            <Button onClick={handleStartScan}>Start DAST</Button>
            <Button onClick={handleStaticScan}>Start SAST</Button>
          </div>
      </DialogContent>
    </Dialog>)
  );
}
