/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/dVMcIHsWpXz
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import {useRouter} from "next/navigation"
// useEffect(()=> {
//   const getNotifs = ()=> {

//   }
// },[])

export function Notifications({notifications}) {

  const router = useRouter()

  function handleTap(notification){
    console.log("handling tap")
   
    if(notification.notification_code == "3"){
  
      let path = notification.api_path; 
      const cleanedPath = path.startsWith('/') ? path.slice(1) : path;
      
      // Encode the cleaned path
      const encodedPath = encodeURIComponent(cleanedPath);
      console.log("Redirecting to ,",cleanedPath)
      router.push(`http://localhost:3000/endpoint?path=${encodedPath}`);
  
      
    }
    else{

      router.push("http://localhost:3000/reports")
    }
  
    return;
  }

  const handleApprove = async (notification)=> {

    try{
      const response = await fetch(`http://127.0.0.1:8000/notification/update/`,{
        method:"POST",
        body:JSON.stringify({

        })
      })
    }
  
  catch(e){

  }
}
  return (
    (<Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="icon" className="rounded-full relative">
          <BellIcon className="w-5 h-5" />
          <div className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[600px] p-0">

        <Card className="border-0 shadow-lg h-[50vh] overflow-scroll">
          <CardHeader className="border-b">
            <CardTitle>Notifications</CardTitle>
            <CardDescription>You have {notifications.notifications.length} unread messages.</CardDescription>
          </CardHeader>
          <CardContent className="p-6 space-y-4 flex flex-col justify-center items-start">
          {notifications.notifications.map((notification) => (

            <div className="flex gap-2">

          <Button variant="ghost" className="rounded-2xl ">

        
        <div key={notification._id.$oid} className="flex items-center  justify-start gap-4 cursor-pointer rounded-2xl" onClick={()=>handleTap(notification)} >
          <div className="h-2 w-2 rounded-full bg-blue-500 mt-1" />
          <div className="space-y-1 flex flex-col justify-center items-start">
            <p className="text-sm font-medium text-wrap">{notification.message}</p>
            <p className="text-sm text-muted-foreground">{notification.notification_code === "3" ? notification.api_path: ""}</p>
            
          </div>
          
        
         
        </div>
        </Button>
        {
            notification.notification_code ==="3" && 
          <div className="flex gap-2">
              <Button variant="success" className="bg-green-700 rounded-2xl h-6" onClick={()=>handleApprove(notification)}>Approve</Button>
              <Button variant="destructive" className="rounded-2xl h-6">Deny</Button>
            </div>
        }
          </div>
          
      ))}
          </CardContent>
        </Card>
      </PopoverContent>
    </Popover>)
  );
}

function BellIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
      <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
    </svg>)
  );
}
